/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package digitalfoodordering;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author HP
 */
public class ViewFoodItems extends javax.swing.JFrame {

    /**
     * Creates new form ViewFoodItems
     */
    ArrayList<fooditems> al = new ArrayList<>();
    fooditemTableModel tm = new fooditemTableModel();
    public ViewFoodItems() {
        initComponents();
        setSize(1000, 1000);
        jTable1.setModel(tm);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cbcuisine = new javax.swing.JComboBox<>();
        cbcategory = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("VIEW FOOD ITEMS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(210, 10, 180, 40);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("CUISINE");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(50, 80, 70, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("CATEGORY");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(50, 140, 80, 20);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 200, 550, 170);

        cbcuisine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----SELECT-----", "SOUTH INDIAN", "PUNJABI", "ITALIAN", "CHINESE", " " }));
        cbcuisine.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbcuisineItemStateChanged(evt);
            }
        });
        cbcuisine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbcuisineActionPerformed(evt);
            }
        });
        getContentPane().add(cbcuisine);
        cbcuisine.setBounds(190, 70, 150, 40);

        cbcategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbcategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbcategoryActionPerformed(evt);
            }
        });
        getContentPane().add(cbcategory);
        cbcategory.setBounds(190, 130, 150, 40);

        jButton1.setText("VIEW");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(450, 100, 73, 40);

        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(123, 403, 130, 40);

        jButton3.setText("EDIT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(353, 400, 120, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbcuisineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbcuisineItemStateChanged
        // TODO add your handling code here:
        String s = cbcuisine.getSelectedItem().toString();
    }//GEN-LAST:event_cbcuisineItemStateChanged

    private void cbcuisineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbcuisineActionPerformed
        // TODO add your handling code here:
         try {
            // TODO add your handling code here:
            String cuisine = cbcuisine.getSelectedItem().toString();
            HttpResponse<String> res = Unirest.get("http://localhost:80/GetCategoryByCuisine")
                    .queryString("cuisine", cuisine).asString();
            String response = res.getBody();
            StringTokenizer st = new StringTokenizer(response, "~!@");       //Each Row Seperated
            int n = st.countTokens();
            cbcategory.removeAllItems();
            for (int i = 1; i <= n; i++) {                                   //Loop Only For Rows,Columns Fixed=8
                String row = st.nextToken();
                StringTokenizer st2 = new StringTokenizer(row, "#$%");       //Each Column Seperated
                String name = st2.nextToken();
                String desc = st2.nextToken();
                String photo = st2.nextToken();
                cbcategory.addItem(name);
            }

        } catch (UnirestException ex) {
            Logger.getLogger(GetCategoryByCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbcuisineActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loaddata();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbcategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbcategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbcategoryActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1)
        {
            JOptionPane.showMessageDialog(this, "PLEASE SELECT A CATEGORY");
            
        }
        else
        {
            String currentfooditem = al.get(jTable1.getSelectedRow()).name;
            int showConfirmDialog = JOptionPane.showConfirmDialog(this,"CONFIRM DELETION???");
            if(showConfirmDialog == JOptionPane.OK_OPTION)
            {
            try {
                HttpResponse<String> res = Unirest.get("http://localhost:80/DeleteRowOfFoodItem")
                        .queryString("currentfooditem",currentfooditem).asString();
                String response = res.getBody();
                if (response.equals("success")) 
                {
                    JOptionPane.showMessageDialog(this, "FOODITEM DELETED SUCCESSFULLY!!!!!");

                } 
                else 
                {
                    JOptionPane.showMessageDialog(this, "FOODITEM DELETION FAILED!!!");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            String category = cbcategory.getSelectedItem().toString();
            String currentfooditem = al.get(jTable1.getSelectedRow()).name;
            String description = al.get(jTable1.getSelectedRow()).description;
            String price = al.get(jTable1.getSelectedRow()).price;
            String photo = al.get(jTable1.getSelectedRow()).photo;
            String type = al.get(jTable1.getSelectedRow()).type;
            EditFoodItem tm = new EditFoodItem(category,currentfooditem,description,type,price,photo);

    }//GEN-LAST:event_jButton3ActionPerformed
    private void loaddata() {
        try {
            // TODO add your handling code here:
            al.clear();
            String category = cbcategory.getSelectedItem().toString();
            HttpResponse<String> res = Unirest.get("http://localhost:80/GetFoodItemByCategory")
                    .queryString("category", category).asString();
            String response = res.getBody();
            StringTokenizer st = new StringTokenizer(response, "~!@");       //Each Row Seperated
            int n = st.countTokens();
            for (int i = 1; i <= n; i++) {                                   //Loop Only For Rows,Columns Fixed=5
                String row = st.nextToken();
                StringTokenizer st2 = new StringTokenizer(row, "#$%");       //Each Column Seperated
                String name = st2.nextToken();
                String desc = st2.nextToken();
                String price = st2.nextToken();
                String type = st2.nextToken();
                String photo = st2.nextToken();
                fooditems obj = new fooditems(name, desc,price,type,photo);              //Sent In Constructor
                al.add(obj);
            }
            jTable1.setRowHeight(100);                                       //Each Row Height Set
            jTable1.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer());
            tm.fireTableDataChanged();

        } catch (UnirestException ex) {
            Logger.getLogger(GetCategoryByCuisine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    class fooditems {

        String name, description,price,type, photo;

        fooditems(String name, String description,String price,String type, String photo) {
            this.name = name;
            this.description = description;
            this.type = type;
            this.price = price;
            this.photo = photo;

        }
    }

    class fooditemTableModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int i, int j) {
            fooditems fi = al.get(i);
            if (j == 0) {
                return fi.name;
            } else if (j == 1) {
                return fi.description;
            }else if (j == 2) {
                return fi.price;
            }else if (j == 3) {
                return fi.type; 
            }else if (j == 4) {
                return fi.photo;
            } else {
                return null;
            }

        }
        @Override
        public String getColumnName(int j) {
            String col[] = {"name", "description", "price","type","photo"};
            return col[j];

        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewFoodItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewFoodItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewFoodItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewFoodItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewFoodItems().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbcategory;
    private javax.swing.JComboBox<String> cbcuisine;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
class ImageRenderer extends DefaultTableCellRenderer {

        JLabel lbl = new JLabel();
        ImageIcon icon = new ImageIcon("");
        BufferedImage bufferedImage, newimage;
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            try {
                URL url = new URL("http://localhost:80/GetResource/" + al.get(row).photo);              //Each Image Path Stored In Database So URI will Be passed and Through Pth Image Fetched
                bufferedImage = ImageIO.read(url);
                newimage = resizephoto(bufferedImage, 100, 100);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            icon = new ImageIcon(newimage);
            lbl.setIcon(icon);
            lbl.setBounds(0, 0, 100, 100);
            return lbl;
        }
    }

    BufferedImage resizephoto(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }
}
